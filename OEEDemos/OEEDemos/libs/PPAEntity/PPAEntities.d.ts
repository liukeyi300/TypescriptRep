///<reference path="../JayData/jaydata.d.ts" />

/*//////////////////////////////////////////////////////////////////////////////////////
////// Autogenerated by JaySvcUtil.exe http://JayData.org for more info        /////////
//////                      oData  V2  TypeScript                              /////////
//////////////////////////////////////////////////////////////////////////////////////*/


declare module PPAModel {
  export class EXT_PP_POS extends $data.Entity {
    constructor();
    constructor(initData: { PPS_NO?: string; PP_NO?: string; POS?: number; PO_ID?: string; EXT_MAT_ID?: string; DEF_ID?: string; UOM_ID?: string; QUANTITY?: string; EXT_PRD_PLAN?: PPAModel.EXT_PRD_PLAN; });
    PPS_NO: string;
    PP_NO: string;
    POS: number;
    PO_ID: string;
    EXT_MAT_ID: string;
    DEF_ID: string;
    UOM_ID: string;
    QUANTITY: string;
    EXT_PRD_PLAN: PPAModel.EXT_PRD_PLAN;
    
  }
  
  export class EXT_PRD_PLAN extends $data.Entity {
    constructor();
    constructor(initData: { PP_NO?: string; EXT_PP_ID?: string; SH_NO?: string; EXT_PP_POS?: PPAModel.EXT_PP_POS[]; });
    PP_NO: string;
    EXT_PP_ID: string;
    SH_NO: string;
    EXT_PP_POS: PPAModel.EXT_PP_POS[];
    
  }
  
  export class MD_CALCULATION extends $data.Entity {
    constructor();
    constructor(initData: { CALC_ID?: string; NAME?: string; TYPE?: string; DESCRIPTION?: string; PROGRAM?: string; });
    CALC_ID: string;
    NAME: string;
    TYPE: string;
    DESCRIPTION: string;
    PROGRAM: string;
    
  }
  
  export class MD_CONFIGURATION extends $data.Entity {
    constructor();
    constructor(initData: { CFG_ID?: string; CFG_TYPE?: string; CFG_NAME?: string; OBJ_TYPE?: string; OBJ_NO?: string; CFG_VALUE?: string; });
    CFG_ID: string;
    CFG_TYPE: string;
    CFG_NAME: string;
    OBJ_TYPE: string;
    OBJ_NO: string;
    CFG_VALUE: string;
    
  }
  
  export class MD_DOM_VALUE extends $data.Entity {
    constructor();
    constructor(initData: { DOM_VAL_NO?: string; DOM_ID?: string; VALUE?: string; DESCRIPTION?: string; DOM_VAL_POS?: number; MD_DOMAIN?: PPAModel.MD_DOMAIN; });
    DOM_VAL_NO: string;
    DOM_ID: string;
    VALUE: string;
    DESCRIPTION: string;
    DOM_VAL_POS: number;
    MD_DOMAIN: PPAModel.MD_DOMAIN;
    
  }
  
  export class MD_DOMAIN extends $data.Entity {
    constructor();
    constructor(initData: { DOM_ID?: string; DOM_NAME?: string; VALUE_TYPE?: string; RANGE_TYPE?: string; UOM_ID?: string; MD_DOM_VALUE?: PPAModel.MD_DOM_VALUE[]; });
    DOM_ID: string;
    DOM_NAME: string;
    VALUE_TYPE: string;
    RANGE_TYPE: string;
    UOM_ID: string;
    MD_DOM_VALUE: PPAModel.MD_DOM_VALUE[];
    
  }
  
  export class MD_DT_CAUSE extends $data.Entity {
    constructor();
    constructor(initData: { DT_CAU_ID?: string; NAME?: string; DT_CLS_ID?: string; TYPE?: string; DESCRIPTION?: string; MD_DT_CLASS?: PPAModel.MD_DT_CLASS; });
    DT_CAU_ID: string;
    NAME: string;
    DT_CLS_ID: string;
    TYPE: string;
    DESCRIPTION: string;
    MD_DT_CLASS: PPAModel.MD_DT_CLASS;
    
  }
  
  export class MD_DT_CLASS extends $data.Entity {
    constructor();
    constructor(initData: { DT_CLS_ID?: string; NAME?: string; DESCRIPTION?: string; MD_DT_CAUSE?: PPAModel.MD_DT_CAUSE[]; });
    DT_CLS_ID: string;
    NAME: string;
    DESCRIPTION: string;
    MD_DT_CAUSE: PPAModel.MD_DT_CAUSE[];
    
  }
  
  export class MD_PAR_CATEGORY extends $data.Entity {
    constructor();
    constructor(initData: { PAR_CAT_ID?: string; PAR_CAT_NO?: string; PAR_CAT_NAME?: string; });
    PAR_CAT_ID: string;
    PAR_CAT_NO: string;
    PAR_CAT_NAME: string;
    
  }
  
  export class MD_PAR_CLASSIFICATION extends $data.Entity {
    constructor();
    constructor(initData: { PAR_CLF_NO?: string; PAR_CAT_ID?: string; PAR_ID?: string; PAR_POS?: number; });
    PAR_CLF_NO: string;
    PAR_CAT_ID: string;
    PAR_ID: string;
    PAR_POS: number;
    
  }
  
  export class MD_PARAMETER extends $data.Entity {
    constructor();
    constructor(initData: { PAR_ID?: string; DATA_TYPE?: string; PAR_NO?: string; PAR_NAME?: string; PAR_TYPE?: string; DISPLAY_LEN?: number; DISPLAY_NAME?: string; DOM_ID?: string; UOM_ID?: string; });
    PAR_ID: string;
    DATA_TYPE: string;
    PAR_NO: string;
    PAR_NAME: string;
    PAR_TYPE: string;
    DISPLAY_LEN: number;
    DISPLAY_NAME: string;
    DOM_ID: string;
    UOM_ID: string;
    
  }
  
  export class MD_UNITS_OF_MEASURE extends $data.Entity {
    constructor();
    constructor(initData: { UOM_ID?: string; OBJ_NO?: string; UOM_TEXT?: string; });
    UOM_ID: string;
    OBJ_NO: string;
    UOM_TEXT: string;
    
  }
  
  export class PM_CFG_TEMPLATE extends $data.Entity {
    constructor();
    constructor(initData: { TMPL_NO?: string; TMPL_ID?: string; TMPL_TYPE?: string; REMARK?: string; });
    TMPL_NO: string;
    TMPL_ID: string;
    TMPL_TYPE: string;
    REMARK: string;
    
  }
  
  export class PM_EQP_CALCULATION extends $data.Entity {
    constructor();
    constructor(initData: { EQP_NO?: string; AVA_CALC_ID?: string; PER_CALC_ID?: string; QA_CALC_ID?: string; });
    EQP_NO: string;
    AVA_CALC_ID: string;
    PER_CALC_ID: string;
    QA_CALC_ID: string;
    
  }
  
  export class PM_EQP_CLASS extends $data.Entity {
    constructor();
    constructor(initData: { CLS_NO?: string; CLS_ID?: string; CLS_NAME?: string; IS_TEMPLATE?: string; PARENT_NO?: string; MASTER_NO?: string; EQP_LEVEL?: number; LIB_NO?: string; REMARK?: string; PM_EQP_CLS_PROPERTY?: PPAModel.PM_EQP_CLS_PROPERTY[]; });
    CLS_NO: string;
    CLS_ID: string;
    CLS_NAME: string;
    IS_TEMPLATE: string;
    PARENT_NO: string;
    MASTER_NO: string;
    EQP_LEVEL: number;
    LIB_NO: string;
    REMARK: string;
    PM_EQP_CLS_PROPERTY: PPAModel.PM_EQP_CLS_PROPERTY[];
    
  }
  
  export class PM_EQP_CLS_PROPERTY extends $data.Entity {
    constructor();
    constructor(initData: { CLS_PRP_NO?: string; CLS_NO?: string; PAR_ID?: string; PAR_POS?: number; PAR_TYPE?: string; VALUE_TYPE?: string; HIGH_VALUE?: string; LOW_VALUE?: string; RANGE_TYPE?: string; PM_EQP_CLASS?: PPAModel.PM_EQP_CLASS; });
    CLS_PRP_NO: string;
    CLS_NO: string;
    PAR_ID: string;
    PAR_POS: number;
    PAR_TYPE: string;
    VALUE_TYPE: string;
    HIGH_VALUE: string;
    LOW_VALUE: string;
    RANGE_TYPE: string;
    PM_EQP_CLASS: PPAModel.PM_EQP_CLASS;
    
  }
  
  export class PM_EQP_PROPERTY extends $data.Entity {
    constructor();
    constructor(initData: { EQP_PRP_NO?: string; EQP_NO?: string; PAR_ID?: string; PAR_POS?: number; PAR_TYPE?: string; VALUE_TYPE?: string; HIGH_VALUE?: string; LOW_VALUE?: string; RANGE_TYPE?: string; TAG_NO?: string; PM_EQUIPMENT?: PPAModel.PM_EQUIPMENT; });
    EQP_PRP_NO: string;
    EQP_NO: string;
    PAR_ID: string;
    PAR_POS: number;
    PAR_TYPE: string;
    VALUE_TYPE: string;
    HIGH_VALUE: string;
    LOW_VALUE: string;
    RANGE_TYPE: string;
    TAG_NO: string;
    PM_EQUIPMENT: PPAModel.PM_EQUIPMENT;
    
  }
  
  export class PM_EQUIPMENT extends $data.Entity {
    constructor();
    constructor(initData: { EQP_NO?: string; EQP_ID?: string; EQP_NAME?: string; EQP_TYPE?: string; CLS_NO?: string; MASTER_NO?: string; MAX_CAPACITY?: string; RT_TAG?: string; PM_EQP_PROPERTY?: PPAModel.PM_EQP_PROPERTY[]; });
    EQP_NO: string;
    EQP_ID: string;
    EQP_NAME: string;
    EQP_TYPE: string;
    CLS_NO: string;
    MASTER_NO: string;
    MAX_CAPACITY: string;
    RT_TAG: string;
    PM_EQP_PROPERTY: PPAModel.PM_EQP_PROPERTY[];
    
  }
  
  export class PM_PER_DETAIL extends $data.Entity {
    constructor();
    constructor(initData: { PDTL_ID?: string; PER_ID?: string; START_TIME?: number; END_TIME?: number; PRD_TYPE?: string; PM_PERIOD?: PPAModel.PM_PERIOD; });
    PDTL_ID: string;
    PER_ID: string;
    START_TIME: number;
    END_TIME: number;
    PRD_TYPE: string;
    PM_PERIOD: PPAModel.PM_PERIOD;
    
  }
  
  export class PM_PERIOD extends $data.Entity {
    constructor();
    constructor(initData: { PER_ID?: string; PER_NAME?: string; SH_ID?: string; START_TIME?: number; END_TIME?: number; PM_PER_DETAIL?: PPAModel.PM_PER_DETAIL[]; PM_SHIFT?: PPAModel.PM_SHIFT; });
    PER_ID: string;
    PER_NAME: string;
    SH_ID: string;
    START_TIME: number;
    END_TIME: number;
    PM_PER_DETAIL: PPAModel.PM_PER_DETAIL[];
    PM_SHIFT: PPAModel.PM_SHIFT;
    
  }
  
  export class PM_SHIFT extends $data.Entity {
    constructor();
    constructor(initData: { SH_ID?: string; SH_END?: string; SH_NAME?: string; SH_START?: string; PM_PERIOD?: PPAModel.PM_PERIOD[]; });
    SH_ID: string;
    SH_END: string;
    SH_NAME: string;
    SH_START: string;
    PM_PERIOD: PPAModel.PM_PERIOD[];
    
  }
  
  export class PM_SHIFT_PATTERN extends $data.Entity {
    constructor();
    constructor(initData: { SHP_ID?: string; SHP_LEN?: number; SHP_NAME?: string; PM_SHP_CYCLES?: PPAModel.PM_SHP_CYCLES[]; });
    SHP_ID: string;
    SHP_LEN: number;
    SHP_NAME: string;
    PM_SHP_CYCLES: PPAModel.PM_SHP_CYCLES[];
    
  }
  
  export class PM_SHP_CYCLES extends $data.Entity {
    constructor();
    constructor(initData: { SHP_CYCLE_NO?: string; SHP_CYCLE_LEN?: number; SHP_CYCLE_POS?: number; SHP_CYCLE_START?: number; SHP_ID?: string; SH_ID?: string; PM_SHIFT_PATTERN?: PPAModel.PM_SHIFT_PATTERN; });
    SHP_CYCLE_NO: string;
    SHP_CYCLE_LEN: number;
    SHP_CYCLE_POS: number;
    SHP_CYCLE_START: number;
    SHP_ID: string;
    SH_ID: string;
    PM_SHIFT_PATTERN: PPAModel.PM_SHIFT_PATTERN;
    
  }
  
  export class PPA_CALENDAR extends $data.Entity {
    constructor();
    constructor(initData: { CALD_NO?: string; CALD_ID?: string; START_TIME?: Date; END_TIME?: Date; SHP_ID?: string; });
    CALD_NO: string;
    CALD_ID: string;
    START_TIME: Date;
    END_TIME: Date;
    SHP_ID: string;
    
  }
  
  export class PPA_DT_RECORD extends $data.Entity {
    constructor();
    constructor(initData: { REC_NO?: string; EQP_NO?: string; D_RECORD?: Date; DT_START_TIME?: Date; DT_END_TIME?: Date; DT_CAU_ID?: string; PROCESSED?: string; D_UPDATE?: Date; D_CALCULATE?: Date; OPERATOR?: string; PPA_DTR_PARAMETER?: PPAModel.PPA_DTR_PARAMETER[]; });
    REC_NO: string;
    EQP_NO: string;
    D_RECORD: Date;
    DT_START_TIME: Date;
    DT_END_TIME: Date;
    DT_CAU_ID: string;
    PROCESSED: string;
    D_UPDATE: Date;
    D_CALCULATE: Date;
    OPERATOR: string;
    PPA_DTR_PARAMETER: PPAModel.PPA_DTR_PARAMETER[];
    
  }
  
  export class PPA_DTR_PARAMETER extends $data.Entity {
    constructor();
    constructor(initData: { PV_NO?: string; PAR_ID?: string; REC_NO?: string; PAR_POS?: number; PAR_TYPE?: string; VALUE_TYPE?: string; HIGH_VALUE?: string; LOW_VALUE?: string; RANGE_TYPE?: string; PPA_DT_RECORD?: PPAModel.PPA_DT_RECORD; });
    PV_NO: string;
    PAR_ID: string;
    REC_NO: string;
    PAR_POS: number;
    PAR_TYPE: string;
    VALUE_TYPE: string;
    HIGH_VALUE: string;
    LOW_VALUE: string;
    RANGE_TYPE: string;
    PPA_DT_RECORD: PPAModel.PPA_DT_RECORD;
    
  }
  
  export class PPA_ENG_RECORD extends $data.Entity {
    constructor();
    constructor(initData: { REC_NO?: string; EQP_NO?: string; D_RECORD?: Date; ENGC_TYPE?: string; SH_NO?: string; PER_NO?: string; BATCH_ID?: string; ENG_ID?: string; QUANTITY?: string; PROCESSED?: string; D_UPDATE?: Date; OPERATOR?: string; PPA_ENGR_PARAMETER?: PPAModel.PPA_ENGR_PARAMETER[]; });
    REC_NO: string;
    EQP_NO: string;
    D_RECORD: Date;
    ENGC_TYPE: string;
    SH_NO: string;
    PER_NO: string;
    BATCH_ID: string;
    ENG_ID: string;
    QUANTITY: string;
    PROCESSED: string;
    D_UPDATE: Date;
    OPERATOR: string;
    PPA_ENGR_PARAMETER: PPAModel.PPA_ENGR_PARAMETER[];
    
  }
  
  export class PPA_ENGR_PARAMETER extends $data.Entity {
    constructor();
    constructor(initData: { PV_NO?: string; PAR_ID?: string; REC_NO?: string; PAR_POS?: number; PAR_TYPE?: string; VALUE_TYPE?: string; HIGH_VALUE?: string; LOW_VALUE?: string; RANGE_TYPE?: string; PPA_ENG_RECORD?: PPAModel.PPA_ENG_RECORD; });
    PV_NO: string;
    PAR_ID: string;
    REC_NO: string;
    PAR_POS: number;
    PAR_TYPE: string;
    VALUE_TYPE: string;
    HIGH_VALUE: string;
    LOW_VALUE: string;
    RANGE_TYPE: string;
    PPA_ENG_RECORD: PPAModel.PPA_ENG_RECORD;
    
  }
  
  export class PPA_EQP_CALENDAR extends $data.Entity {
    constructor();
    constructor(initData: { OBJ_NO?: string; EQP_NO?: string; CALD_NO?: string; });
    OBJ_NO: string;
    EQP_NO: string;
    CALD_NO: string;
    
  }
  
  export class PPA_MAT_RECORD extends $data.Entity {
    constructor();
    constructor(initData: { REC_NO?: string; EQP_NO?: string; D_RECORD?: Date; MATC_TYPE?: string; SHF_NO?: string; PER_NO?: string; MAT_TYPE?: string; EXT_MAT_ID?: string; DEF_ID?: string; UOM_ID?: string; PO_ID?: string; QUANTITY?: string; PROCESSED?: string; D_UPDATE?: Date; OPERATOR?: string; PPA_MATR_PARAMETER?: PPAModel.PPA_MATR_PARAMETER[]; });
    REC_NO: string;
    EQP_NO: string;
    D_RECORD: Date;
    MATC_TYPE: string;
    SHF_NO: string;
    PER_NO: string;
    MAT_TYPE: string;
    EXT_MAT_ID: string;
    DEF_ID: string;
    UOM_ID: string;
    PO_ID: string;
    QUANTITY: string;
    PROCESSED: string;
    D_UPDATE: Date;
    OPERATOR: string;
    PPA_MATR_PARAMETER: PPAModel.PPA_MATR_PARAMETER[];
    
  }
  
  export class PPA_MATR_PARAMETER extends $data.Entity {
    constructor();
    constructor(initData: { PV_NO?: string; PAR_ID?: string; REC_NO?: string; PAR_POS?: number; PAR_TYPE?: string; VALUE_TYPE?: string; HIGH_VALUE?: string; LOW_VALUE?: string; RANGE_TYPE?: string; PPA_MAT_RECORD?: PPAModel.PPA_MAT_RECORD; });
    PV_NO: string;
    PAR_ID: string;
    REC_NO: string;
    PAR_POS: number;
    PAR_TYPE: string;
    VALUE_TYPE: string;
    HIGH_VALUE: string;
    LOW_VALUE: string;
    RANGE_TYPE: string;
    PPA_MAT_RECORD: PPAModel.PPA_MAT_RECORD;
    
  }
  
  export class PPA_OEE_SUMMARY extends $data.Entity {
    constructor();
    constructor(initData: { SUM_NO?: string; EQP_NO?: string; SH_NO?: string; PER_NO?: string; PER_START_TIME?: Date; PER_END_TIME?: Date; PL_PRD_TIME?: string; ACT_PRD_TIME?: string; SCH_DT_TIME?: string; UNSCH_DT_TIME?: string; UNSCH_DT_CNT?: string; IDEAL?: string; ACTUAL?: string; TOTAL_ITEMS?: string; QA_ITEMS?: string; REWORK_ITEMS?: string; SCRAP_ITEMS?: string; PPA_AVA?: string; PPA_PER?: string; PPA_QUA?: string; PPA_COM?: string; D_UPDATE?: Date; });
    SUM_NO: string;
    EQP_NO: string;
    SH_NO: string;
    PER_NO: string;
    PER_START_TIME: Date;
    PER_END_TIME: Date;
    PL_PRD_TIME: string;
    ACT_PRD_TIME: string;
    SCH_DT_TIME: string;
    UNSCH_DT_TIME: string;
    UNSCH_DT_CNT: string;
    IDEAL: string;
    ACTUAL: string;
    TOTAL_ITEMS: string;
    QA_ITEMS: string;
    REWORK_ITEMS: string;
    SCRAP_ITEMS: string;
    PPA_AVA: string;
    PPA_PER: string;
    PPA_QUA: string;
    PPA_COM: string;
    D_UPDATE: Date;
    
  }
  
  export class PPA_PER_DETAIL extends $data.Entity {
    constructor();
    constructor(initData: { PDTL_NO?: string; PER_NO?: string; START_TIME?: Date; END_TIME?: Date; PRD_TYPE?: string; PPA_PERIOD?: PPAModel.PPA_PERIOD; });
    PDTL_NO: string;
    PER_NO: string;
    START_TIME: Date;
    END_TIME: Date;
    PRD_TYPE: string;
    PPA_PERIOD: PPAModel.PPA_PERIOD;
    
  }
  
  export class PPA_PER_RECORD extends $data.Entity {
    constructor();
    constructor(initData: { REC_NO?: string; EQP_NO?: string; D_RECORD?: Date; REC_START_TIME?: Date; REC_END_TIME?: Date; SH_NO?: string; PER_NO?: string; BATCH_ID?: string; IDEAL?: string; ACTUAL?: string; PROCESSED?: string; D_UPDATE?: Date; OPERATOR?: string; PPA_PERR_PARAMETER?: PPAModel.PPA_PERR_PARAMETER[]; });
    REC_NO: string;
    EQP_NO: string;
    D_RECORD: Date;
    REC_START_TIME: Date;
    REC_END_TIME: Date;
    SH_NO: string;
    PER_NO: string;
    BATCH_ID: string;
    IDEAL: string;
    ACTUAL: string;
    PROCESSED: string;
    D_UPDATE: Date;
    OPERATOR: string;
    PPA_PERR_PARAMETER: PPAModel.PPA_PERR_PARAMETER[];
    
  }
  
  export class PPA_PERIOD extends $data.Entity {
    constructor();
    constructor(initData: { PER_NO?: string; PER_ID?: string; SH_NO?: string; START_TIME?: Date; END_TIME?: Date; PPA_PER_DETAIL?: PPAModel.PPA_PER_DETAIL[]; PPA_SHIFT?: PPAModel.PPA_SHIFT; });
    PER_NO: string;
    PER_ID: string;
    SH_NO: string;
    START_TIME: Date;
    END_TIME: Date;
    PPA_PER_DETAIL: PPAModel.PPA_PER_DETAIL[];
    PPA_SHIFT: PPAModel.PPA_SHIFT;
    
  }
  
  export class PPA_PERR_PARAMETER extends $data.Entity {
    constructor();
    constructor(initData: { PV_NO?: string; PAR_ID?: string; REC_NO?: string; PAR_POS?: number; PAR_TYPE?: string; VALUE_TYPE?: string; HIGH_VALUE?: string; LOW_VALUE?: string; RANGE_TYPE?: string; PPA_PER_RECORD?: PPAModel.PPA_PER_RECORD; });
    PV_NO: string;
    PAR_ID: string;
    REC_NO: string;
    PAR_POS: number;
    PAR_TYPE: string;
    VALUE_TYPE: string;
    HIGH_VALUE: string;
    LOW_VALUE: string;
    RANGE_TYPE: string;
    PPA_PER_RECORD: PPAModel.PPA_PER_RECORD;
    
  }
  
  export class PPA_QA_RECORD extends $data.Entity {
    constructor();
    constructor(initData: { REC_NO?: string; EQP_NO?: string; D_RECORD?: Date; REC_START_TIME?: Date; REC_END_TIME?: Date; SH_NO?: string; PER_NO?: string; BATCH_ID?: string; TOTAL?: string; QUALIFY?: string; REWORK?: string; SCRAP?: string; PROCESSED?: string; D_UPDATE?: Date; OPERATOR?: string; PPA_QAR_PARAMETER?: PPAModel.PPA_QAR_PARAMETER[]; });
    REC_NO: string;
    EQP_NO: string;
    D_RECORD: Date;
    REC_START_TIME: Date;
    REC_END_TIME: Date;
    SH_NO: string;
    PER_NO: string;
    BATCH_ID: string;
    TOTAL: string;
    QUALIFY: string;
    REWORK: string;
    SCRAP: string;
    PROCESSED: string;
    D_UPDATE: Date;
    OPERATOR: string;
    PPA_QAR_PARAMETER: PPAModel.PPA_QAR_PARAMETER[];
    
  }
  
  export class PPA_QAR_PARAMETER extends $data.Entity {
    constructor();
    constructor(initData: { PV_NO?: string; PAR_ID?: string; REC_NO?: string; PAR_POS?: number; PAR_TYPE?: string; VALUE_TYPE?: string; HIGH_VALUE?: string; LOW_VALUE?: string; RANGE_TYPE?: string; PPA_QA_RECORD?: PPAModel.PPA_QA_RECORD; });
    PV_NO: string;
    PAR_ID: string;
    REC_NO: string;
    PAR_POS: number;
    PAR_TYPE: string;
    VALUE_TYPE: string;
    HIGH_VALUE: string;
    LOW_VALUE: string;
    RANGE_TYPE: string;
    PPA_QA_RECORD: PPAModel.PPA_QA_RECORD;
    
  }
  
  export class PPA_SHIFT extends $data.Entity {
    constructor();
    constructor(initData: { SH_NO?: string; SH_ID?: string; CALD_NO?: string; START_TIME?: Date; END_TIME?: Date; TEAM_ID?: string; PPA_PERIOD?: PPAModel.PPA_PERIOD[]; });
    SH_NO: string;
    SH_ID: string;
    CALD_NO: string;
    START_TIME: Date;
    END_TIME: Date;
    TEAM_ID: string;
    PPA_PERIOD: PPAModel.PPA_PERIOD[];
    
  }
  
  export class SYS_USER_SESSION extends $data.Entity {
    constructor();
    constructor(initData: { SESSION_NO?: string; TERMINAL_ID?: string; USER_ID?: string; ROLE_ID?: string; SESSION_START_DATE?: Date; SESSION_END_DATE?: Date; });
    SESSION_NO: string;
    TERMINAL_ID: string;
    USER_ID: string;
    ROLE_ID: string;
    SESSION_START_DATE: Date;
    SESSION_END_DATE: Date;
    
  }
  
}

declare module AicTech.PPA.DataModel {
    export class PPAEntities extends $data.EntityContext {
        onReady(): $data.IPromise<any>;
        onReady(handler: (context: PPAEntities) => void): $data.IPromise<any>;
    
    EXT_PP_POS: $data.EntitySet<PPAModel.EXT_PP_POS>;
    EXT_PRD_PLAN: $data.EntitySet<PPAModel.EXT_PRD_PLAN>;
    MD_CALCULATION: $data.EntitySet<PPAModel.MD_CALCULATION>;
    MD_CONFIGURATION: $data.EntitySet<PPAModel.MD_CONFIGURATION>;
    MD_DOM_VALUE: $data.EntitySet<PPAModel.MD_DOM_VALUE>;
    MD_DOMAIN: $data.EntitySet<PPAModel.MD_DOMAIN>;
    MD_DT_CAUSE: $data.EntitySet<PPAModel.MD_DT_CAUSE>;
    MD_DT_CLASS: $data.EntitySet<PPAModel.MD_DT_CLASS>;
    MD_PAR_CATEGORY: $data.EntitySet<PPAModel.MD_PAR_CATEGORY>;
    MD_PAR_CLASSIFICATION: $data.EntitySet<PPAModel.MD_PAR_CLASSIFICATION>;
    MD_PARAMETER: $data.EntitySet<PPAModel.MD_PARAMETER>;
    MD_UNITS_OF_MEASURE: $data.EntitySet<PPAModel.MD_UNITS_OF_MEASURE>;
    PM_CFG_TEMPLATE: $data.EntitySet<PPAModel.PM_CFG_TEMPLATE>;
    PM_EQP_CALCULATION: $data.EntitySet<PPAModel.PM_EQP_CALCULATION>;
    PM_EQP_CLASS: $data.EntitySet<PPAModel.PM_EQP_CLASS>;
    PM_EQP_CLS_PROPERTY: $data.EntitySet<PPAModel.PM_EQP_CLS_PROPERTY>;
    PM_EQP_PROPERTY: $data.EntitySet<PPAModel.PM_EQP_PROPERTY>;
    PM_EQUIPMENT: $data.EntitySet<PPAModel.PM_EQUIPMENT>;
    PM_PER_DETAIL: $data.EntitySet<PPAModel.PM_PER_DETAIL>;
    PM_PERIOD: $data.EntitySet<PPAModel.PM_PERIOD>;
    PM_SHIFT: $data.EntitySet<PPAModel.PM_SHIFT>;
    PM_SHIFT_PATTERN: $data.EntitySet<PPAModel.PM_SHIFT_PATTERN>;
    PM_SHP_CYCLES: $data.EntitySet<PPAModel.PM_SHP_CYCLES>;
    PPA_CALENDAR: $data.EntitySet<PPAModel.PPA_CALENDAR>;
    PPA_DT_RECORD: $data.EntitySet<PPAModel.PPA_DT_RECORD>;
    PPA_DTR_PARAMETER: $data.EntitySet<PPAModel.PPA_DTR_PARAMETER>;
    PPA_ENG_RECORD: $data.EntitySet<PPAModel.PPA_ENG_RECORD>;
    PPA_ENGR_PARAMETER: $data.EntitySet<PPAModel.PPA_ENGR_PARAMETER>;
    PPA_EQP_CALENDAR: $data.EntitySet<PPAModel.PPA_EQP_CALENDAR>;
    PPA_MAT_RECORD: $data.EntitySet<PPAModel.PPA_MAT_RECORD>;
    PPA_MATR_PARAMETER: $data.EntitySet<PPAModel.PPA_MATR_PARAMETER>;
    PPA_OEE_SUMMARY: $data.EntitySet<PPAModel.PPA_OEE_SUMMARY>;
    PPA_PER_DETAIL: $data.EntitySet<PPAModel.PPA_PER_DETAIL>;
    PPA_PER_RECORD: $data.EntitySet<PPAModel.PPA_PER_RECORD>;
    PPA_PERIOD: $data.EntitySet<PPAModel.PPA_PERIOD>;
    PPA_PERR_PARAMETER: $data.EntitySet<PPAModel.PPA_PERR_PARAMETER>;
    PPA_QA_RECORD: $data.EntitySet<PPAModel.PPA_QA_RECORD>;
    PPA_QAR_PARAMETER: $data.EntitySet<PPAModel.PPA_QAR_PARAMETER>;
    PPA_SHIFT: $data.EntitySet<PPAModel.PPA_SHIFT>;
    SYS_USER_SESSION: $data.EntitySet<PPAModel.SYS_USER_SESSION>;
    GetSequenceNextValue: {
        (sequenceName: string, handler?: (result: string) => void): $data.IPromise<any>;
        (params?: { sequenceName?: string; }, handler?: (result: string) => void): $data.IPromise<any>;
    };
    GetSequenceNextValues: {
        (sequenceName: string, count: number, handler?: (result: string[]) => void): $data.IPromise<any>;
        (params?: { sequenceName?: string; count?: number; }, handler?: (result: string[]) => void): $data.IPromise<any>;
    };
    
  }

}
